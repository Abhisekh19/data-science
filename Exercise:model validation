{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2d10267d",
   "metadata": {
    "papermill": {
     "duration": 0.008294,
     "end_time": "2024-05-01T14:53:51.931993",
     "exception": false,
     "start_time": "2024-05-01T14:53:51.923699",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Introduction to Machine Learning](https://www.kaggle.com/learn/intro-to-machine-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/dansbecker/model-validation).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e15b1f28",
   "metadata": {
    "papermill": {
     "duration": 0.005617,
     "end_time": "2024-05-01T14:53:51.945970",
     "exception": false,
     "start_time": "2024-05-01T14:53:51.940353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Recap\n",
    "You've built a model. In this exercise you will test how good your model is.\n",
    "\n",
    "Run the cell below to set up your coding environment where the previous exercise left off."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c5280fc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:51.960343Z",
     "iopub.status.busy": "2024-05-01T14:53:51.959633Z",
     "iopub.status.idle": "2024-05-01T14:53:54.652322Z",
     "shell.execute_reply": "2024-05-01T14:53:54.651409Z"
    },
    "papermill": {
     "duration": 2.702525,
     "end_time": "2024-05-01T14:53:54.654740",
     "exception": false,
     "start_time": "2024-05-01T14:53:51.952215",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First in-sample predictions: [208500. 181500. 223500. 140000. 250000.]\n",
      "Actual target values for those homes: [208500, 181500, 223500, 140000, 250000]\n",
      "Setup Complete\n"
     ]
    }
   ],
   "source": [
    "# Code you have previously used to load data\n",
    "import pandas as pd\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "# Path of the file to read\n",
    "iowa_file_path = '../input/home-data-for-ml-course/train.csv'\n",
    "\n",
    "home_data = pd.read_csv(iowa_file_path)\n",
    "y = home_data.SalePrice\n",
    "feature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\n",
    "X = home_data[feature_columns]\n",
    "\n",
    "# Specify Model\n",
    "iowa_model = DecisionTreeRegressor()\n",
    "# Fit Model\n",
    "iowa_model.fit(X, y)\n",
    "\n",
    "print(\"First in-sample predictions:\", iowa_model.predict(X.head()))\n",
    "print(\"Actual target values for those homes:\", y.head().tolist())\n",
    "\n",
    "# Set up code checking\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.machine_learning.ex4 import *\n",
    "print(\"Setup Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "306ea40f",
   "metadata": {
    "papermill": {
     "duration": 0.005877,
     "end_time": "2024-05-01T14:53:54.666997",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.661120",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exercises\n",
    "\n",
    "## Step 1: Split Your Data\n",
    "Use the `train_test_split` function to split up your data.\n",
    "\n",
    "Give it the argument `random_state=1` so the `check` functions know what to expect when verifying your code.\n",
    "\n",
    "Recall, your features are loaded in the DataFrame **X** and your target is loaded in **y**.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3776db0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.681808Z",
     "iopub.status.busy": "2024-05-01T14:53:54.681274Z",
     "iopub.status.idle": "2024-05-01T14:53:54.702630Z",
     "shell.execute_reply": "2024-05-01T14:53:54.701452Z"
    },
    "papermill": {
     "duration": 0.032015,
     "end_time": "2024-05-01T14:53:54.705103",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.673088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_SplitData\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import the train_test_split function and uncomment\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# fill in and uncomment\n",
    "train_X, val_X, train_y, val_y = train_test_split(X,y,random_state=1)\n",
    "\n",
    "# Check your answer\n",
    "step_1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c3d353c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.720453Z",
     "iopub.status.busy": "2024-05-01T14:53:54.719752Z",
     "iopub.status.idle": "2024-05-01T14:53:54.724005Z",
     "shell.execute_reply": "2024-05-01T14:53:54.723054Z"
    },
    "papermill": {
     "duration": 0.014445,
     "end_time": "2024-05-01T14:53:54.726153",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.711708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# The lines below will show you a hint or the solution.\n",
    "# step_1.hint() \n",
    "# step_1.solution()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40a639e7",
   "metadata": {
    "papermill": {
     "duration": 0.006609,
     "end_time": "2024-05-01T14:53:54.739389",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.732780",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 2: Specify and Fit the Model\n",
    "\n",
    "Create a `DecisionTreeRegressor` model and fit it to the relevant data.\n",
    "Set `random_state` to 1 again when creating the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc18ea64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.754557Z",
     "iopub.status.busy": "2024-05-01T14:53:54.753906Z",
     "iopub.status.idle": "2024-05-01T14:53:54.783072Z",
     "shell.execute_reply": "2024-05-01T14:53:54.781856Z"
    },
    "papermill": {
     "duration": 0.039532,
     "end_time": "2024-05-01T14:53:54.785499",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.745967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[186500. 184000. 130000.  92000. 164500. 220000. 335000. 144152. 215000.\n",
      " 262000.]\n",
      "[186500. 184000. 130000.  92000. 164500. 220000. 335000. 144152. 215000.\n",
      " 262000.]\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_FitModelWithTrain\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# You imported DecisionTreeRegressor in your last exercise\n",
    "# and that code has been copied to the setup code above. So, no need to\n",
    "# import it again\n",
    "\n",
    "# Specify the model\n",
    "iowa_model = DecisionTreeRegressor(random_state=1)\n",
    "\n",
    "# Fit iowa_model with the training data.\n",
    "iowa_model.fit(train_X,train_y)\n",
    "\n",
    "# Check your answer\n",
    "step_2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "04fb2314",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.802084Z",
     "iopub.status.busy": "2024-05-01T14:53:54.800976Z",
     "iopub.status.idle": "2024-05-01T14:53:54.805790Z",
     "shell.execute_reply": "2024-05-01T14:53:54.804823Z"
    },
    "papermill": {
     "duration": 0.015597,
     "end_time": "2024-05-01T14:53:54.808147",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.792550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#step_2.hint()\n",
    "#step_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c581d268",
   "metadata": {
    "papermill": {
     "duration": 0.006829,
     "end_time": "2024-05-01T14:53:54.822025",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.815196",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 3: Make Predictions with Validation data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "73491937",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.837966Z",
     "iopub.status.busy": "2024-05-01T14:53:54.837560Z",
     "iopub.status.idle": "2024-05-01T14:53:54.850500Z",
     "shell.execute_reply": "2024-05-01T14:53:54.849225Z"
    },
    "papermill": {
     "duration": 0.023676,
     "end_time": "2024-05-01T14:53:54.852905",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.829229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_ValPreds\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Predict with all validation observations\n",
    "val_predictions = iowa_model.predict(val_X)\n",
    "\n",
    "# Check your answer\n",
    "step_3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8d49415a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.871151Z",
     "iopub.status.busy": "2024-05-01T14:53:54.870066Z",
     "iopub.status.idle": "2024-05-01T14:53:54.874720Z",
     "shell.execute_reply": "2024-05-01T14:53:54.873934Z"
    },
    "papermill": {
     "duration": 0.016579,
     "end_time": "2024-05-01T14:53:54.876887",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.860308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# step_3.hint()\n",
    "# step_3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6595966b",
   "metadata": {
    "papermill": {
     "duration": 0.007011,
     "end_time": "2024-05-01T14:53:54.891274",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.884263",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Inspect your predictions and actual values from validation data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "68eb71bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.908194Z",
     "iopub.status.busy": "2024-05-01T14:53:54.907375Z",
     "iopub.status.idle": "2024-05-01T14:53:54.915005Z",
     "shell.execute_reply": "2024-05-01T14:53:54.913732Z"
    },
    "papermill": {
     "duration": 0.018765,
     "end_time": "2024-05-01T14:53:54.917366",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.898601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[186500. 184000. 130000.  92000. 164500. 220000. 335000. 144152. 215000.\n",
      " 262000.]\n",
      "258     231500\n",
      "267     179500\n",
      "288     122000\n",
      "649      84500\n",
      "1233    142000\n",
      "167     325624\n",
      "926     285000\n",
      "831     151000\n",
      "1237    195000\n",
      "426     275000\n",
      "Name: SalePrice, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# print the top few validation predictions\n",
    "print(val_predictions[0:10])\n",
    "# print the top few actual prices from validation data\n",
    "print(val_y[0:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "239796cf",
   "metadata": {
    "papermill": {
     "duration": 0.007157,
     "end_time": "2024-05-01T14:53:54.932160",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.925003",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "What do you notice that is different from what you saw with in-sample predictions (which are printed after the top code cell in this page).\n",
    "\n",
    "Do you remember why validation predictions differ from in-sample (or training) predictions? This is an important idea from the last lesson.\n",
    "\n",
    "## Step 4: Calculate the Mean Absolute Error in Validation Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7143dd9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.949534Z",
     "iopub.status.busy": "2024-05-01T14:53:54.948601Z",
     "iopub.status.idle": "2024-05-01T14:53:54.959629Z",
     "shell.execute_reply": "2024-05-01T14:53:54.958363Z"
    },
    "papermill": {
     "duration": 0.022933,
     "end_time": "2024-05-01T14:53:54.962578",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.939645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29652.931506849316\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"4_MAE\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "val_mae = mean_absolute_error(val_predictions,val_y)\n",
    "\n",
    "# uncomment following line to see the validation_mae\n",
    "print(val_mae)\n",
    "\n",
    "# Check your answer\n",
    "step_4.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "123e58ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T14:53:54.980424Z",
     "iopub.status.busy": "2024-05-01T14:53:54.980023Z",
     "iopub.status.idle": "2024-05-01T14:53:54.984632Z",
     "shell.execute_reply": "2024-05-01T14:53:54.983462Z"
    },
    "papermill": {
     "duration": 0.016617,
     "end_time": "2024-05-01T14:53:54.987132",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.970515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# step_4.hint()\n",
    "# step_4.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31e7e05b",
   "metadata": {
    "papermill": {
     "duration": 0.00773,
     "end_time": "2024-05-01T14:53:55.003487",
     "exception": false,
     "start_time": "2024-05-01T14:53:54.995757",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Is that MAE good?  There isn't a general rule for what values are good that applies across applications. But you'll see how to use (and improve) this number in the next step.\n",
    "\n",
    "# Keep Going\n",
    "\n",
    "You are ready for **[Underfitting and Overfitting](https://www.kaggle.com/dansbecker/underfitting-and-overfitting).**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e2fea18",
   "metadata": {
    "papermill": {
     "duration": 0.007607,
     "end_time": "2024-05-01T14:53:55.019080",
     "exception": false,
     "start_time": "2024-05-01T14:53:55.011473",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-machine-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 111096,
     "sourceId": 10211,
     "sourceType": "competition"
    },
    {
     "datasetId": 11167,
     "sourceId": 15520,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2709,
     "sourceId": 38454,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.784782,
   "end_time": "2024-05-01T14:53:55.648666",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-01T14:53:48.863884",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
